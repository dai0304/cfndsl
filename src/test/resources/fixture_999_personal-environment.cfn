cloudFormation {
  description "Portnoy personal environment template"
  
  parameters {
    keyName() // よくあるparameter設定はメソッドで一発設定
    dbUsername("admin")
    dbPassword()
    HostedZone {
      description "The DNS name of an existing Amazon Route 53 hosted zone"
      default "members.classmethod.info"
      type "String"
    }
    DeveloperIP {
      description "The IP address for developer"
      default "210.189.104.105"
      type "String"
    }
  }
  
  mappings {
    natAmi() // よくあるmapping設定
    amazonLinuxAmi()
    AZ [
      "us-east-1":      [ "primary": "us-east-1d",      "secondary": "us-east-1a" ],
      "us-west-2":      [ "primary": "us-west-2a",      "secondary": "us-west-2b" ],
      "us-west-1":      [ "primary": "us-west-1a",      "secondary": "us-west-1b" ],
      "eu-west-1":      [ "primary": "eu-west-1a",      "secondary": "eu-west-1b" ],
      "ap-southeast-1": [ "primary": "ap-southeast-1a", "secondary": "ap-southeast-1b" ],
      "ap-southeast-2": [ "primary": "ap-southeast-2a", "secondary": "ap-southeast-2b" ],
      "ap-northeast-1": [ "primary": "ap-northeast-1a", "secondary": "ap-northeast-1c" ],
      "sa-east-1":      [ "primary": "sa-east-1a",      "secondary": "sa-east-1b" ]
    ]
    StackConfig [
      "VPC"               : [ "CIDR" : "10.0.0.0/16" ],
      "FrontendSubnet1"   : [ "CIDR" : "10.0.0.0/24" ],
      "FrontendSubnet2"   : [ "CIDR" : "10.0.1.0/24" ],
      "ApplicationSubnet1": [ "CIDR" : "10.0.2.0/24" ],
      "ApplicationSubnet2": [ "CIDR" : "10.0.3.0/24" ],
      "DatabaseSubnet1"   : [ "CIDR" : "10.0.4.0/24" ],
      "DatabaseSubnet2"   : [ "CIDR" : "10.0.5.0/24" ],
      "NATServer"    : [ "InstanceType" : "t1.micro" ],
      "BastionServer": [ "InstanceType" : "t1.micro" ],
      "DBServer"     : [ "InstanceType" : "db.m1.small", "AllocatedStorage" : "50", "DBName" : "portnoy" ]
    ]
  }
  
  resources {
    iamRole("PowerUserRole") {
      assumeRolePolicyDocument """{
        "Statement": [ {
          "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
        } ]
      }"""
      path "/"
      policies [ """{
        "PolicyName" : "PowerUserPolicy",
        "PolicyDocument" : {
          "Statement": [ {
            "Sid": "PowerUserStmt",
            "Effect": "Allow",
            "NotAction": "iam:*",
            "Resource": "*"
          } ]
        }
      }""" ]
    }
    iamInstanceProfile("PowerUserProfile") {
      path "/"
      roles [ ref("PowerUserRole") ]
    }

    ec2Vpc("VPC") {
      cidrBlock refMap("StackConfig", "VPC", "CIDR")
      instanceTenancy "default"
      tags [
        Application: ref("AWS::StackId"),
        Network: "Public",
        CmBillingGroup: "CMP"
      ]
    }
    ec2InternetGateway("InternetGateway") {
      tags [
        Application: ref("AWS::StackId"),
        Network: "Public",
        CmBillingGroup: "CMP"
      ]
    }
    ec2VPCGatewayAttachment("AttachGateway") {
      vpcId ref("VPC")
      internetGatewayId ref("InternetGateway")
    }

    ec2RouteTable(name: "PublicRouteTable", dependsOn "AttachGateway") {
      vpcId ref("VPC")
      tags [
        Application: ref("AWS::StackId"),
        Network: "Public",
        CmBillingGroup: "CMP"
      ]
    }
    ec2RouteTable("ProtectedRouteTable") {
      vpcId ref("VPC")
      tags [
        Application: ref("AWS::StackId"),
        Network: "Protected",
        CmBillingGroup: "CMP"
      ]
    }
    ec2Route("PublicRoute") {
      routeTableId ref("PublicRouteTable")
      destinationCidrBlock "0.0.0.0/0"
      gatewayId ref("InternetGateway")
    }
    ec2Route("ProtectedRoute") {
      routeTableId ref("ProtectedRouteTable")
      destinationCidrBlock "0.0.0.0/0"
      instanceId ref("NATInstance")
    }

    ec2Subnet("FrontendSubnet1") {
      vpcId ref("VPC")
      availabilityZone refMap("AZ", ref("AWS::Region"), "primary")
      cidrBlock refMap("StackConfig", "FrontendSubnet1", "CIDR")
      tags [
        Application: ref("AWS::StackId"),
        Network: "Public",
        CmBillingGroup: "CMP"
      ]
    }
    ec2Subnet("FrontendSubnet2") {
      vpcId ref("VPC")
      availabilityZone refMap("AZ", ref("AWS::Region"), "secondary")
      cidrBlock refMap("StackConfig", "FrontendSubnet2", "CIDR")
      tags [
        Application: ref("AWS::StackId"),
        Network: "Public",
        CmBillingGroup: "CMP"
      ]
    }
    ec2Subnet("ApplicationSubnet1") {
      vpcId ref("VPC")
      availabilityZone refMap("AZ", ref("AWS::Region"), "primary")
      cidrBlock refMap("StackConfig", "ApplicationSubnet1", "CIDR")
      tags [
        Application: ref("AWS::StackId"),
        Network: "Public",
        CmBillingGroup: "CMP"
      ]
    }
    ec2Subnet("ApplicationSubnet2") {
      vpcId ref("VPC")
      availabilityZone refMap("AZ", ref("AWS::Region"), "secondary")
      cidrBlock refMap("StackConfig", "ApplicationSubnet2", "CIDR")
      tags [
        Application: ref("AWS::StackId"),
        Network: "Protected",
        CmBillingGroup: "CMP"
      ]
    }
    ec2Subnet("DatabaseSubnet1") {
      vpcId ref("VPC")
      cidrBlock refMap("StackConfig", "DatabaseSubnet1", "CIDR")
      availabilityZone refMap("AZ", region(), "primary") // region() == ref("AWS::Region")
      tags [
        Application: stackId(),
        Network: "Protected",
        CmBillingGroup: "CMP"
      ]
    }
    ec2Subnet("DatabaseSubnet2") {
      vpcId ref("VPC")
      cidrBlock refMap("StackConfig", "DatabaseSubnet2", "CIDR")
      availabilityZone refMap("AZ", region(), "secondary")
      tags [
        Application: stackId(), // stackId() == ref("AWS::StackId")
        Network: "Protected",
        CmBillingGroup: "CMP"
      ]
    },

//    ec2SubnetRouteTableAssociation("FrontendSubnet1RouteTableAssociation") {
//      subnetId ref("FrontendSubnet1")
//      routeTableId ref("PublicRouteTable")
//    }
//    ec2SubnetRouteTableAssociation("FrontendSubnet2RouteTableAssociation") {
//      subnetId ref("FrontendSubnet2")
//      routeTableId ref("PublicRouteTable")
//    }
//    ec2SubnetRouteTableAssociation("ApplicationSubnet1RouteTableAssociation") {
//      subnetId ref("ApplicationSubnet1")
//      routeTableId ref("PublicRouteTable")
//    }
//    ec2SubnetRouteTableAssociation("ApplicationSubnet2RouteTableAssociation") {
//      subnetId ref("ApplicationSubnet2")
//      routeTableId ref("ProtectedRouteTable")
//    }
//    ec2SubnetRouteTableAssociation("DatabaseSubnet1RouteTableAssociation") {
//      subnetId ref("DatabaseSubnet1")
//      routeTableId ref("ProtectedRouteTable")
//    }
//    ec2SubnetRouteTableAssociation("DatabaseSubnet2RouteTableAssociation") {
//      subnetId ref("DatabaseSubnet2")
//      routeTableId ref("ProtectedRouteTable")
//    }
    [
      "FrontendSubnet1": "PublicRouteTable", "FrontendSubnet2": "PublicRouteTable",
      "ApplicationSubnet1": "ProtectedRouteTable", "ApplicationSubnet2": "ProtectedRouteTable",
      "DatabaseSubnet1": "ProtectedRouteTable", "DatabaseSubnet2": "ProtectedRouteTable"
    ].each { k, v ->
      ec2SubnetRouteTableAssociation("${k}RouteTableAssociation") {
        subnetId ref(k)
        routeTableId ref(v)
      }
    }


    ec2SecurityGroup("VPCDefaultSecurityGroup") {
      vpcId ref("VPC")
      groupDescription "Allow all communications in VPC"
      securityGroupIngress [
        tcp(0, 65535, refMap("StackConfig", "VPC", "CIDR"))
        udp(0, 65535, refMap("StackConfig", "VPC", "CIDR"))
        icmp(refMap("StackConfig", "VPC", "CIDR"))
      ]
      tags [
        Application: stackId(),
        CmBillingGroup: "CMP"
      ]
    }
    ec2SecurityGroup("SSHSecurityGroup") {
      vpcId ref("VPC")
      "GroupDescription" : "Enable SSH access via port 22",
      "SecurityGroupIngress" : [
        tcp(22, 22, "59.146.77.152/32"),
        tcp(22, 22, "202.213.251.236/32"),
        tcp(22, 22, join("", [ ref("DeveloperIP"), "/32" ]))
      ]
      tags [
        Application: stackId(),
        CmBillingGroup: "CMP"
      ]
    }
    ec2SecurityGroup("NATSecurityGroup") {
      vpcId ref("VPC")
      groupDescription "Enable internal access to the NAT device"
      tags [
        Application: stackId(),
        CmBillingGroup: "CMP"
      ]
    }

    ec2SecurityGroup("PublicWebSecurityGroup") {
      vpcId ref("VPC")
      groupDescription "Public ELB Security Group with HTTP access on port 443 from the internet"
      securityGroupIngress [
        tcp(80, 80, "0.0.0.0/0"),
        tcp(443, 443, "0.0.0.0/0")
      ]
      tags [
        Application: stackId(),
        CmBillingGroup: "CMP"
      ]
    }
    ec2SecurityGroup("ProtectedWebSecurityGroup") {
      vpcId ref("VPC")
      groupDescription "Protected ELB Security Group with HTTP access on port 80/443 from the family part of the internet"
      securityGroupIngress [
        tcp(80, 80, "59.146.77.152/32" },
        tcp(80, 80, "202.213.251.236/32" },
        tcp(80, 80, join("", [ ref("DeveloperIP"), "/32" ])),
        tcp(80, 80, join("", [ ref("NATInstanceEIP"), "/32" ])),
        tcp(80, 80, join("", [ ref("BastionInstanceEIP"), "/32" ])),

        tcp(443, 443, "59.146.77.152/32" },
        tcp(443, 443, "202.213.251.236/32" },
        tcp(443, 443, join("", [ ref("DeveloperIP"), "/32" ])),
        tcp(443, 443, join("", [ ref("NATInstanceEIP"), "/32" ])),
        tcp(443, 443, join("", [ ref("BastionInstanceEIP"), "/32" ]))
      ]
      tags [
        Application: stackId(),
        CmBillingGroup: "CMP"
      ]
    }

    ec2SecurityGroup("MySQLSecurityGroup") {
      vpcId ref("VPC")
      groupDescription "Enable MySQL access via port 3306 from VPC"
      securityGroupIngress [
        tcp(3306, 3306, refMap("StackConfig", "VPC", "CIDR"))
      ]
      tags [
        Application: stackId(),
        CmBillingGroup: "CMP"
      ]
    }


    route53RecordSet("NATDNSRecord") {
      hostedZoneName: join("", [ref("HostedZone"), "." ])
      comment "A record for the NAT instance."
      name join("", ["nat.", ref("HostedZone"), "." ])
      type "A"
      TTL "300"
      resourceRecords [
        ref("NATInstanceEIP")
      ]
    }
    route53RecordSet("NATLocalDNSRecord") {
      hostedZoneName: join("", [ref("HostedZone"), "." ])
      comment "A record for the private IP address of NAT instance."
      name join("", ["nat.local.", ref("HostedZone"), "." ])
      type "A"
      TTL "300"
      resourceRecords [
        getAtt("NATInstance", "PrivateIp")
      ]
    }
    ec2EIP(name: "NATInstanceEIP", dependsOn: "AttachGateway") {
      domain "vpc"
      instanceId ref"("NATInstance")
    }
    ec2Instance("NATInstance") {
      instanceType refMap("StackConfig", "NATServer", "InstanceType")
      keyName ref("KeyName")
      subnetId ref("FrontendSubnet1")
      sourceDestCheck false
      imageId refMap("AWSNATAMI", region(), "AMI")
      iamInstanceProfile ref("PowerUserProfile")
      securityGroupIds [
        ref("NATSecurityGroup"),
        ref("VPCDefaultSecurityGroup")
      ]
      tags [
        Application: stackId(),
        Name: "NAT",
        CmBillingGroup: "CMP"
      ]
    }

    route53RecordSet("BastionDNSRecord") {
      hostedZoneName: join("", [ref("HostedZone"), "." ])
      comment "A record for the Bastion instance."
      name join("", ["bastion.", ref("HostedZone"), "." ])
      type "A"
      TTL "300"
      resourceRecords [
        ref("BastionInstanceEIP")
      ]
    }
    route53RecordSet("BastionLocalDNSRecord") {
        hostedZoneName: join("", [ref("HostedZone"), "." ])
        comment "A record for the private IP address of Bastion instance."
        name join("", ["bastion.local.", ref("HostedZone"), "." ])
        type "A"
        TTL "300"
        resourceRecords [
          getAtt("BastionInstance", "PrivateIp")
        ]
    }
    ec2EIP(name: "BastionInstanceEIP", dependsOn: "AttachGateway") {
      domain "vpc"
      instanceId ref"("BastionInstance")
    }
    ec2Instance("BastionInstance") {
      instanceType refMap("StackConfig", "BastionServer", "InstanceType")
      keyName ref("KeyName")
      subnetId ref("FrontendSubnet1")
      imageId refMap("AWSAmazonLinuxAMI", region(), "201309")
      iamInstanceProfile ref("PowerUserProfile")
      securityGroupIds [
        ref("SSHSecurityGroup"),
        ref("VPCDefaultSecurityGroup")
      ]
      tags [
        Application: stackId(),
        Name: "Bastion",
        CmBillingGroup: "CMP"
      ]
    }

    snsTopic("ApplicationErrorsTopic") {
      displayName "application-errors"
    }

    route53RecordSet("DatabaseDNSRecordDevelopment") {
      hostedZoneName: join("", [ ref("HostedZone"), "." ])
      comment "CNAME for the database."
      name join("", ["rdsdev.local.", ref("HostedZone"), "." ])
      type "CNAME"
      TTL "300"
      resourceRecords [
        getAtt("DBInstance", "Endpoint.Address")
      ]
    }
    rdsDBParameterGroup("DBParamGroup") {
      description "Default parameter group for Portnoy"
      family "MySQL5.6"
      parameters [
        "character_set_database" : "utf8mb4",
        "character_set_client" : "utf8mb4",
        "character_set_connection" : "utf8mb4",
        "character_set_results" : "utf8mb4",
        "character_set_server" : "utf8mb4",
        "sort_buffer_size" : "2097152",
        "skip-character-set-client-handshake" : "TRUE"
      ]
      tags [
        Application: stackId(),
        CmBillingGroup: "CMP"
      ]
    },
    rdsDBSubnetGroup("DBSubnetGroup") {
      dbSubnetGroupDescription "Database subnets for RDS"
      subnetIds [
        ref("DatabaseSubnet1"),
        ref("DatabaseSubnet2")
      ]
      tags [
        Application: stackId(),
        CmBillingGroup: "CMP"
      ]
    },
    rdsDBInstance(name: "DBInstance", deletionPolicy: "Snapshot") {
      dbInstanceClass refMap("StackConfig", "DBServer", "InstanceType")
      allocatedStorage refMap("StackConfig", "DBServer", "AllocatedStorage")
      engine" "MySQL"
      multiAZ false
      engineVersion "5.6.13"
      masterUsername ref("DBUsername")
      masterUserPassword ref("DBPassword")
      dbName refMap("StackConfig", "DBServer", "DBName")
      backupRetentionPeriod 7
      dbParameterGroupName ref("DBParamGroup")
      dbSubnetGroupName ref("DBSubnetGroup")
      preferredBackupWindow "19:30-20:00"
      preferredMaintenanceWindow "sat:00:00-sat:00:30",
      vpcSecurityGroups [
        ref("VPCDefaultSecurityGroup"),
        ref("MySQLSecurityGroup")
      ]
      tags [
        Application: stackId(),
        CmBillingGroup: "CMP"
      ]
    }
  }

  outputs {
    JdbcConnectionString {
      value join("", [
        "jdbc:mysql://",
        ref("DatabaseDNSRecordDevelopment"), ":",
        getAtt("DBInstance", "Endpoint.Port"), "/",
        refMap("StackConfig", "DBServer", "DBName")
      ])
      description "-"
    }
    JdbcConnectionStringDevelopment {
      value join("", [
        "jdbc:mysql://",
        ref("DatabaseDNSRecordDevelopment"), ":",
        getAtt("DBInstance", "Endpoint.Port"), "/",
        refMap("StackConfig", "DBServer", "DBName")
      ])
      description "-"
    }
  }
}
